// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Pjs1.Common.DAL;
using System;

namespace Pjs1.Common.Migrations.MsSql1Db
{
    [DbContext(typeof(MsSql1DbContext))]
    [Migration("20180512051051_CreateMigrationDatabaseMsSql1")]
    partial class CreateMigrationDatabaseMsSql1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("ActionTime");

                    b.Property<int>("ContactReceiverId");

                    b.Property<int>("ContactSenderId");

                    b.Property<int>("ReceiverStatus");

                    b.Property<int>("SenderStatus");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactReceiverId");

                    b.HasIndex("ContactSenderId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConversationReceiverId");

                    b.Property<int>("ConversationSenderId");

                    b.Property<string>("Message");

                    b.Property<int>("MessageDataType");

                    b.Property<DateTimeOffset>("SendTime");

                    b.HasKey("ConversationId");

                    b.HasIndex("ConversationReceiverId");

                    b.HasIndex("ConversationSenderId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Interlocutor", b =>
                {
                    b.Property<int>("InterlocutorId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InterlocutorType");

                    b.Property<string>("Name");

                    b.Property<string>("ProfileImageUrl");

                    b.Property<string>("StatusUnderName");

                    b.Property<string>("TimeZone");

                    b.Property<string>("UserId");

                    b.HasKey("InterlocutorId");

                    b.ToTable("Interlocutor");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Logs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrentData");

                    b.Property<DateTimeOffset>("LogDatetime");

                    b.Property<int>("PkId");

                    b.Property<string>("PreviousData");

                    b.Property<string>("TableName");

                    b.HasKey("LogId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Contact", b =>
                {
                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "ContactReceiver")
                        .WithMany("ContactReceiver")
                        .HasForeignKey("ContactReceiverId");

                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "ContactSender")
                        .WithMany("ContactSender")
                        .HasForeignKey("ContactSenderId");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Conversation", b =>
                {
                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "ConversationReceiver")
                        .WithMany("ConversationReceiver")
                        .HasForeignKey("ConversationReceiverId");

                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "ConversationSender")
                        .WithMany("ConversationSender")
                        .HasForeignKey("ConversationSenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
