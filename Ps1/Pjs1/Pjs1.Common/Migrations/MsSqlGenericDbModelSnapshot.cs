// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Pjs1.Common.DAL.Models;
using Pjs1.Common.Enums;
using Pjs1.Common.GenericDbContext;
using System;

namespace Pjs1.Common.Migrations
{
    [DbContext(typeof(MsSqlGenericDb))]
    partial class MsSqlGenericDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("ActionTime");

                    b.Property<int>("ContactReceiverId");

                    b.Property<int>("ContactSenderId");

                    b.Property<int>("ReceiverStatus");

                    b.Property<int>("SenderStatus");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactReceiverId");

                    b.HasIndex("ContactSenderId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConversationReceiverId");

                    b.Property<int>("ConversationSenderId");

                    b.Property<string>("Message");

                    b.Property<int>("MessageDataType");

                    b.Property<DateTimeOffset>("SendTime");

                    b.HasKey("ConversationId");

                    b.HasIndex("ConversationReceiverId");

                    b.HasIndex("ConversationSenderId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Interlocutor", b =>
                {
                    b.Property<int>("InterlocutorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<int>("InterlocutorType");

                    b.Property<string>("ProfileImageUrl");

                    b.Property<string>("StatusUnderName");

                    b.Property<string>("TimeZone");

                    b.Property<int>("UserId");

                    b.HasKey("InterlocutorId");

                    b.ToTable("Interlocutor");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InterlocutorId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("OnlineStatus");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("InterlocutorId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Contact", b =>
                {
                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "ContactReceiver")
                        .WithMany("ContactReceiver")
                        .HasForeignKey("ContactReceiverId");

                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "ContactSender")
                        .WithMany("ContactSender")
                        .HasForeignKey("ContactSenderId");
                });

            modelBuilder.Entity("Pjs1.Common.DAL.Models.Conversation", b =>
                {
                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "ConversationReceiver")
                        .WithMany("ConversationReceiver")
                        .HasForeignKey("ConversationReceiverId");

                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "ConversationSender")
                        .WithMany("ConversationSender")
                        .HasForeignKey("ConversationSenderId");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericRoleClaim", b =>
                {
                    b.HasOne("Pjs1.Common.GenericDbContext.GenericRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUser", b =>
                {
                    b.HasOne("Pjs1.Common.DAL.Models.Interlocutor", "Interlocutor")
                        .WithOne("User")
                        .HasForeignKey("Pjs1.Common.GenericDbContext.GenericUser", "InterlocutorId");
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUserClaim", b =>
                {
                    b.HasOne("Pjs1.Common.GenericDbContext.GenericUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUserLogin", b =>
                {
                    b.HasOne("Pjs1.Common.GenericDbContext.GenericUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUserRole", b =>
                {
                    b.HasOne("Pjs1.Common.GenericDbContext.GenericRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pjs1.Common.GenericDbContext.GenericUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pjs1.Common.GenericDbContext.GenericUserToken", b =>
                {
                    b.HasOne("Pjs1.Common.GenericDbContext.GenericUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
